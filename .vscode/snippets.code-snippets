{
    "ns-template": {
      "scope": "typescript",
      "prefix": "template",
      "body": [
        "import { NS } from '@ns'",
        "",
        "export async function main(ns: NS): Promise<void> {",
        "  //",
        "}"
      ]
    },
    // New coding contract file: Function name is based on file name, title/cct type is presumed to be the clipboard
    "cct-template": {
      "scope": "typescript",
      "prefix": "template",
      "body": [
        "import { NS } from '@ns'",
        "import { autocomplete_func, ccts_main, CCTSolver } from './interface';",
        "import { assert_eq, assert_all_passed } from '/lib/assert';",
        "",
        "export const autocomplete = autocomplete_func;",
        "",
        "export const contracts = new Map<string, CCTSolver>([",
        "  [\"${CLIPBOARD}\", { solve: ${TM_FILENAME_BASE/-/_/g}, test: test_${TM_FILENAME_BASE/-/_/g} }],",
        "]);",
        "",
        "export const main = ccts_main(contracts);",
        "",
        "/**",
        " * ${CLIPBOARD}",
        " *",
        " * DESCRIPTION_HERE",
        " * @param data PARAM_DESCRIPTION_HERE",
        " */",
        "function ${TM_FILENAME_BASE/-/_/g}(data: unknown) {",
        "  if (typeof(data) !== 'number') {",
        "    throw new Error('Expected number, received ' + JSON.stringify(data));",
        "  }",
        "  // TODO: Implement ${CLIPBOARD}",
        "",
        "  return 0;",
        "}",
        "",
        "function test_${TM_FILENAME_BASE/-/_/g}(ns: NS) {",
        "  // Test cases for ${TM_FILENAME_BASE/-/_/g}",
        "  const testCases = [",
        "    // TODO: Replace with proper test cases",
        "    { input: 2, expected: 2 },",
        "    { input: 3, expected: 3 },",
        "    { input: 4, expected: 2 },",
        "    { input: 5, expected: 5 },",
        "    { input: 6, expected: 3 },",
        "    { input: 833301272, expected: 2815207 },",
        "    { input: 783586238, expected: 7392323 },",
        "    { input: 439117236, expected: 12197701 },",
        "  ];",
        "",
        "  for (const { input, expected } of testCases) {",
        "    const actual = ${TM_FILENAME_BASE/-/_/g}(input);",
        "    assert_eq(ns, expected, actual, `${TM_FILENAME_BASE/-/_/g}(${JSON.stringify(input)})`);",
        "  }",
        "",
        "  assert_all_passed(ns);",
        "}"
      ]
    },
    "autocomplete": {
      "scope": "typescript",
      "prefix": "autocomplete",
      "body": [
        "// eslint-disable-next-line @typescript-eslint/no-unused-vars",
        "export function autocomplete(data : AutocompleteData, args : string[]) : string[] {",
        "  return [...data.servers];",
        "}"
      ],
      "description": "autocomplete"
    }
  }
